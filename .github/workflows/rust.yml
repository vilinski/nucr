name: Rust

on:
  push:
    branches: [ "main" ]
    tags: [ "v*" ]
  pull_request:
    branches: [ "main" ]

env:
  CARGO_TERM_COLOR: always

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Install system dependencies
      run: |
        sudo apt update
        sudo apt install -y libdbus-1-dev pkg-config dbus dbus-x11

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable

    - name: Setup D-Bus session
      run: |
        # Start D-Bus session for keyring tests
        dbus-launch --sh-syntax > /tmp/dbus-env
        source /tmp/dbus-env
        export DBUS_SESSION_BUS_ADDRESS

    - name: Cache cargo dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          ~/.cargo/bin
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

    - name: Install dependencies
      run: cargo install cargo-nextest --locked
    - name: Run tests
      run: |
        source /tmp/dbus-env 2>/dev/null || true
        export DBUS_SESSION_BUS_ADDRESS
        cargo nextest run --verbose

  build:
    name: Build for ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            binary-suffix: ""
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            binary-suffix: ".exe"
          - os: macos-latest
            target: x86_64-apple-darwin
            binary-suffix: ""
          - os: macos-latest
            target: aarch64-apple-darwin
            binary-suffix: ""

    steps:
    - uses: actions/checkout@v4

    - name: Install system dependencies (Linux)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt update
        sudo apt install -y libdbus-1-dev pkg-config

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}

    - name: Build
      run: cargo build --release --target ${{ matrix.target }}

    - name: Rename binary
      shell: bash
      run: |
        mkdir -p artifacts
        if [ "${{ matrix.target }}" = "aarch64-apple-darwin" ]; then
          cp target/${{ matrix.target }}/release/nucr${{ matrix.binary-suffix }} artifacts/nucr-${{ matrix.target }}${{ matrix.binary-suffix }}
        else
          cp target/${{ matrix.target }}/release/nucr${{ matrix.binary-suffix }} artifacts/nucr-${{ matrix.target }}${{ matrix.binary-suffix }}
        fi

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: nucr-${{ matrix.target }}
        path: artifacts/nucr-${{ matrix.target }}${{ matrix.binary-suffix }}

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [test, build]
    if: startsWith(github.ref, 'refs/tags/v')
    permissions:
      contents: write

    steps:
    - uses: actions/checkout@v4

    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts

    - name: Create release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          artifacts/*/nucr-*
        generate_release_notes: true
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}